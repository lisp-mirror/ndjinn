(in-package #:ndjinn)

(defgeneric collide-p (shape1 shape2)
  (:method (shape1 shape2)))

(defmethod collide-p ((shape1 collider-shape/sphere)
                      (shape2 collider-shape/sphere))
  (let ((entity1 (collider-shape-entity shape1))
        (entity2 (collider-shape-entity shape2)))
    (<= (v3:distance
         (transform-point entity1 (collider-shape-center shape1))
         (transform-point entity2 (collider-shape-center shape2)))
        (+ (v3:length (transform-vector entity1 v3:+right+))
           (v3:length (transform-vector entity2 v3:+right+))))))

(defun %collide-p/sphere-box (sphere box)
  (declare (optimize speed))
  (let* ((sphere-entity (collider-shape-entity sphere))
         (sphere-center (transform-point sphere-entity
                                         (collider-shape-center sphere)))
         (point (v3:- (get-closest-point/box-point box sphere-center)
                      sphere-center)))
    (<= (v3:dot point point)
        (v3:length-squared (transform-vector sphere-entity v3:+right+)))))

(defmethod collide-p ((shape1 collider-shape/sphere)
                      (shape2 collider-shape/box))
  (%collide-p/sphere-box shape1 shape2))

(defmethod collide-p ((shape1 collider-shape/box)
                      (shape2 collider-shape/sphere))
  (%collide-p/sphere-box shape2 shape1))

(defmethod collide-p ((shape1 collider-shape/box) (shape2 collider-shape/box))
  (u:mvlet ((r r-abs (make-box-box-rotation shape1 shape2)))
    (m3:with-components ((r r) (ar r-abs))
      (v3:with-components ((tr (make-box-box-translation shape1 shape2))
                           (h1 (box-half-widths shape1))
                           (h2 (box-half-widths shape2)))
        (not (or (> (abs trx)
                    (+ h1x (* h2x ar00) (* h2y ar01) (* h2z ar02)))
                 (> (abs try)
                    (+ h1y (* h2x ar10) (* h2y ar11) (* h2z ar12)))
                 (> (abs trz)
                    (+ h1z (* h2x ar20) (* h2y ar21) (* h2z ar22)))
                 (> (abs (+ (* trx r00) (* try r10) (* trz r20)))
                    (+ (* h1x ar00) (* h1y ar10) (* h1z ar20) h2x))
                 (> (abs (+ (* trx r01) (* try r11) (* trz r21)))
                    (+ (* h1x ar01) (* h1y ar11) (* h1z ar21) h2y))
                 (> (abs (+ (* trx r02) (* try r12) (* trz r22)))
                    (+ (* h1x ar02) (* h1y ar12) (* h1z ar22) h2z))
                 (> (abs (- (* trz r10) (* try r20)))
                    (+ (* h1y ar20) (* h1z ar10) (* h2y ar02) (* h2z ar01)))
                 (> (abs (- (* trz r11) (* try r21)))
                    (+ (* h1y ar21) (* h1z ar11) (* h2x ar02) (* h2z ar00)))
                 (> (abs (- (* trz r12) (* try r22)))
                    (+ (* h1y ar22) (* h1z ar12) (* h2x ar01) (* h2y ar00)))
                 (> (abs (- (* trx r20) (* trz r00)))
                    (+ (* h1x ar20) (* h1z ar00) (* h2y ar12) (* h2z ar11)))
                 (> (abs (- (* trx r21) (* trz r01)))
                    (+ (* h1x ar21) (* h1z ar01) (* h2x ar12) (* h2z ar10)))
                 (> (abs (- (* trx r22) (* trz r02)))
                    (+ (* h1x ar22) (* h1z ar02) (* h2x ar11) (* h2y ar10)))
                 (> (abs (- (* try r00) (* trx r10)))
                    (+ (* h1x ar10) (* h1y ar00) (* h2y ar22) (* h2z ar21)))
                 (> (abs (- (* try r01) (* trx r11)))
                    (+ (* h1x ar11) (* h1y ar01) (* h2x ar22) (* h2z ar20)))
                 (> (abs (- (* try r02) (* trx r12)))
                    (+ (* h1x ar12) (* h1y ar02) (* h2x ar21)
                       (* h2y ar20)))))))))
