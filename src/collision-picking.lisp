(in-package #:ndjinn)

(defstruct (picker
            (:predicate nil)
            (:copier nil))
  (start (v3:vec) :type v3:vec)
  (end (v3:vec) :type v3:vec))

(defgeneric pick-collision-shape (picker shape)
  (:method (picker shape)))

(defmethod pick-collision-shape (picker (shape collision-shape/sphere))
  (let* ((entity (collision-shape-entity shape))
         (center (collision-shape-center shape))
         (start (line:start picker))
         (direction (line:direction picker))
         (m (v3:- start (transform-point entity center)))
         (b (v3:dot m direction))
         (c (- (v3:dot m m) (expt (sphere-radius shape) 2))))
    (unless (and (plusp c) (plusp b))
      (let ((discriminant (- (expt b 2) c)))
        (unless (minusp discriminant)
          (let ((x (max 0.0 (- (- b) (sqrt discriminant)))))
            (when (<= x (line:length picker))
              x)))))))

(defmethod pick-collision-shape (picker (shape collision-shape/box))
  (let* ((entity (collision-shape-entity shape))
         (center (collision-shape-center shape))
         (start (v3:- (transform-point entity
                                       (line:start picker)
                                       :space :world)
                      center))
         (end (v3:- (transform-point entity
                                     (line:end picker)
                                     :space :world)
                    center))
         (line (line:line :start start :end end))
         (direction (line:direction line))
         (t-min 0f0)
         (t-max (line:length line)))
    (dotimes (i 3)
      (let ((p-i (aref start i))
            (min-i (aref (box-min-extent shape) i))
            (max-i (aref (box-max-extent shape) i)))
        (if (< (abs (aref direction i)) 1e-7)
            (when (or (< p-i min-i)
                      (> p-i max-i))
              (return-from pick-collision-shape nil))
            (let* ((inv-d (/ (aref direction i)))
                   (t1 (* (- min-i p-i) inv-d))
                   (t2 (* (- max-i p-i) inv-d)))
              (when (> t1 t2)
                (rotatef t1 t2))
              (setf t-min (max t-min t1)
                    t-max (min t-max t2))
              (when (> t-min t-max)
                (return-from pick-collision-shape nil))))))
    t-min))

(defun update-picker ()
  (u:mvlet ((x y dx dy (get-mouse-position)))
    (u:when-let* ((viewport (get-viewport-by-coordinates x y))
                  (picker (viewport-picker viewport))
                  (start (line:start picker))
                  (end (line:end picker))
                  (camera (viewport-camera viewport))
                  (view (camera/view camera))
                  (proj (camera/projection camera))
                  (viewport (v4:vec (viewport-x viewport)
                                    (viewport-y viewport)
                                    (viewport-width viewport)
                                    (viewport-height viewport))))
      (v3:copy! start
                (point3d:unproject (point3d:point x y 0f0)
                                   view
                                   proj
                                   viewport))
      (v3:copy! end
                (point3d:unproject (point3d:point x y 1f0)
                                   view
                                   proj
                                   viewport)))))

(defun pick-entity ()
  (u:mvlet* ((scene (current-scene =context=))
             (mx my (get-mouse-position))
             (viewport (get-viewport-by-coordinates mx my))
             (picker (viewport-picker viewport))
             (picked nil))
    (update-picker)
    (u:do-hash-values (v (collision-system-active
                          (scene-collision-system scene)))
      (u:do-hash-keys (k v)
        (u:when-let ((n (pick-collision-shape picker (collider/shape k))))
          (when (collider/pickable k)
            (push (cons n k) picked)))))
    (when picked
      (let* ((collider (cdar (stable-sort picked #'< :key #'car)))
             (entity (collider/owner collider)))
        (setf (scene-picked-entity scene) entity)
        (on-collision-picked (collider/layer collider) entity)
        entity))))

(defun unpick-entity ()
  (setf (scene-picked-entity (current-scene =context=)) nil))

(defun entity-picked-p (entity)
  (eq entity (scene-picked-entity (current-scene =context=))))
