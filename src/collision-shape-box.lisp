(in-package #:ndjinn)

(defstruct (collision-shape/box
            (:include collision-shape)
            (:constructor %make-collision-shape/box)
            (:conc-name box-)
            (:predicate nil)
            (:copier nil))
  (world-center (v3:vec) :type v3:vec)
  (axes (m3:mat) :type m3:mat)
  (half-widths (v3:vec) :type v3:vec)
  (min-extent (v3:vec -0.5) :type v3:vec)
  (max-extent (v3:vec 0.5) :type v3:vec)
  (closest-point-distance (v3:vec) :type v3:vec)
  (closest-point (v3:vec) :type v3:vec)
  (axis-column (v3:vec) :type v3:vec)
  (rotation (m3:mat 1) :type m3:mat)
  (normalized-rotation (m3:mat 1) :type m3:mat)
  (translation (v3:vec) :type v3:vec)
  (diagonal (v3:vec) :type v3:vec)
  (extent-center (v3:vec) :type v3:vec))

(defun get-closest-point/box-point (box point)
  (declare (optimize speed))
  (let* ((world-center (box-world-center box))
         (axes (box-axes box))
         (d (v3:-! (box-closest-point-distance box) point world-center))
         (q (v3:copy! (box-closest-point box) world-center)))
    (dotimes (i 3)
      (let* ((e (aref (box-half-widths box) i))
             (axis (m3:get-column! (box-axis-column box) axes i))
             (dist (u:clamp (v3:dot d axis) (- e) e)))
        (v3:+! q q (v3:scale axis dist))))
    q))

(defun make-box-box-rotation (box1 box2)
  (declare (optimize speed))
  (let ((axes1 (box-axes box1))
        (axis1 (box-axis-column box1))
        (axes2 (box-axes box2))
        (axis2 (box-axis-column box2)))
    (m3:with-components ((a (box-rotation box1))
                         (b (box-rotation box2)))
      (psetf a00 (v3:dot (m3:get-column! axis1 axes1 0)
                         (m3:get-column! axis2 axes2 0))
             a10 (v3:dot (m3:get-column! axis1 axes1 1)
                         (m3:get-column! axis2 axes2 0))
             a20 (v3:dot (m3:get-column! axis1 axes1 2)
                         (m3:get-column! axis2 axes2 0))
             a01 (v3:dot (m3:get-column! axis1 axes1 0)
                         (m3:get-column! axis2 axes2 1))
             a11 (v3:dot (m3:get-column! axis1 axes1 1)
                         (m3:get-column! axis2 axes2 1))
             a21 (v3:dot (m3:get-column! axis1 axes1 2)
                         (m3:get-column! axis2 axes2 1))
             a02 (v3:dot (m3:get-column! axis1 axes1 0)
                         (m3:get-column! axis2 axes2 2))
             a12 (v3:dot (m3:get-column! axis1 axes1 1)
                         (m3:get-column! axis2 axes2 2))
             a22 (v3:dot (m3:get-column! axis1 axes1 2)
                         (m3:get-column! axis2 axes2 2)))
      (setf b00 (+ (abs a00) 1e-7)
            b10 (+ (abs a10) 1e-7)
            b20 (+ (abs a20) 1e-7)
            b01 (+ (abs a01) 1e-7)
            b11 (+ (abs a11) 1e-7)
            b21 (+ (abs a21) 1e-7)
            b02 (+ (abs a02) 1e-7)
            b12 (+ (abs a12) 1e-7)
            b22 (+ (abs a22) 1e-7))
      (values a b))))

(defun make-box-box-translation (box1 box2)
  (declare (optimize speed))
  (let* ((axes1 (box-axes box1))
         (axis1 (box-axis-column box1))
         (world-center1 (box-world-center box1))
         (world-center2 (box-world-center box2))
         (translation (v3:-! (box-translation box1)
                             world-center2
                             world-center1)))
    (v3:vec (v3:dot translation (m3:get-column! axis1 axes1 0))
            (v3:dot translation (m3:get-column! axis1 axes1 1))
            (v3:dot translation (m3:get-column! axis1 axes1 2)))))

(defun update-collision-shape/box (shape)
  (declare (optimize speed))
  (let* ((entity (collision-shape-entity shape))
         (center (collision-shape-center shape))
         (min-extent (box-min-extent shape))
         (max-extent (box-max-extent shape))
         (min (transform-point entity (v3:+ center min-extent)))
         (max (transform-point entity (v3:+ center max-extent)))
         (center (v3:lerp! (box-extent-center shape) min max 0.5))
         (axes (m4:rotation-to-mat3
                (m4:normalize-rotation (transform/model entity))))
         (axis (box-axis-column shape))
         (diagonal (v3:-! (box-diagonal shape) max center))
         (half-widths (v3:vec (v3:dot diagonal (m3:get-column! axis axes 0))
                              (v3:dot diagonal (m3:get-column! axis axes 1))
                              (v3:dot diagonal (m3:get-column! axis axes 2)))))
    (setf (box-world-center shape) center
          (box-axes shape) axes
          (box-half-widths shape) half-widths)))

(defun make-collision-shape/box (&rest args)
  (let ((shape (apply #'%make-collision-shape/box args)))
    (setf (box-update-func shape) #'update-collision-shape/box)
    shape))
