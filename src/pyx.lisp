(in-package #:net.mfiano.lisp.pyx)

(defun initialize (user-args)
  (let ((title (cfg :title)))
    (start-logging)
    (log:info :pyx "Starting ~a..." title)
    (load-player-config)
    (setup-repl)
    (initialize-rng)
    (prepare-gamepads)
    (make-display)
    (make-input-data)
    (load-hardware-info)
    (make-thread-pool)
    (initialize-shaders)
    (make-clock)
    (make-flows)
    (apply #'on-context-create =context= user-args)
    (log:info :pyx "Started ~a" title)
    (start-loop)))

(defun deinitialize ()
  (macrolet ((%deinitialize (&body body)
               `(progn
                  ,@(mapcar
                     (lambda (x)
                       `(with-simple-restart (abort "Continue deinitializing")
                          ,x))
                     body))))
    (let ((title (cfg :title)))
      (%deinitialize
       (log:info :pyx "Shutting down ~a..." title)
       (on-context-destroy =context=)
       (shutdown-gamepads)
       (kill-display)
       (destroy-thread-pool)
       (sdl2:quit*)
       (log:info :pyx "Exited ~a" title)
       (stop-logging)
       (setf =context= nil)
       (tg:gc :full t)))))

(defun update ()
  (let ((alpha (get-alpha)))
    (do-nodes (node)
      (on-entity-update node))
    (process-flows)
    (do-nodes (entity)
      (resolve-model entity alpha))))

(defun physics-update ()
  (let ((delta (float (cfg :delta-time) 1f0)))
    (do-nodes (entity)
      (on-entity-physics-update entity)
      (transform-node entity delta))
    (compute-collisions)))

(defun periodic-update ()
  (update-repl)
  (process-queue :recompile))

(defun start-loop ()
  (let* ((clock (clock =context=))
         (display (display =context=))
         (refresh-rate (display-refresh-rate display)))
    (log:debug :pyx "Entered main game loop")
    (with-profile
      (u:while (running =context=)
        (with-continuable
          (handle-events)
          (tick-clock clock refresh-rate #'physics-update #'periodic-update)
          (update)
          (render display))))))

(defun start-engine (context-name &rest user-args)
  (unless (and =context= (running =context=))
    (setf =context= (make-context context-name))
    (unwind-protect (initialize user-args)
      (deinitialize))))

(defun stop-engine ()
  (setf (running =context=) nil))

(defun pause-game ()
  (do-nodes (entity)
    (when (eq (node/pause-mode entity) :stop)
      (setf (node/paused entity) t))))

(defun unpause-game ()
  (do-nodes (entity :include-paused t)
    (when (eq (node/pause-mode entity) :stop)
      (setf (node/paused entity) nil))))
